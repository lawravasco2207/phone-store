import React, { useState, useRef, useEffect } from "react";
import ChatBubble from "./ChatBubble";
import { api } from "../../utils/api";
import { useAuth } from "../AuthContext";
import './chatStyles.css';
import type { Product } from "../../utils/api";
import { useNavigate } from "react-router-dom";

interface Message {
    id: string;
    sender: 'user' | 'bot';
    text: string;
    timestamp: Date;
    products?: Product[];
}

const ChatBot: React.FC = () => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [input, setInput] = useState('');
    const [loading, setLoading] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);
    const { user } = useAuth();
    const navigate = useNavigate();
    
    // Generate a unique ID for each message
    const generateId = () => `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    // Auto-scroll to the latest message
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Focus input when chat opens
    useEffect(() => {
        if (isOpen) {
            inputRef.current?.focus();
        }
    }, [isOpen]);

    const handleAddToCart = async (productId: number) => {
        try {
            const response = await api.addToCart(productId, 1);
            if (response.success) {
                // Add a success message from the bot
                const botMsg: Message = { 
                    id: generateId(), 
                    sender: 'bot', 
                    text: "I've added that item to your cart! Would you like to see more products or proceed to checkout?",
                    timestamp: new Date()
                };
                setMessages(prev => [...prev, botMsg]);
            } else {
                const botMsg: Message = { 
                    id: generateId(), 
                    sender: 'bot', 
                    text: "I couldn't add that item to your cart. Please try again or browse our catalog.",
                    timestamp: new Date()
                };
                setMessages(prev => [...prev, botMsg]);
            }
        } catch (err) {
            console.error('Add to cart error:', err);
            const botMsg: Message = { 
                id: generateId(), 
                sender: 'bot', 
                text: "There was an error adding the item to your cart. Please try again.",
                timestamp: new Date()
            };
            setMessages(prev => [...prev, botMsg]);
        }
    };

    const handleViewDetails = (productId: number) => {
        // Navigate to product details page
        navigate(`/products/${productId}`);
    };

    const sendMessage = async () => {
        if (!input.trim() || loading) return;

        const userMsg: Message = { 
            id: generateId(), 
            sender: 'user', 
            text: input, 
            timestamp: new Date() 
        };
        
        setMessages(prev => [...prev, userMsg]);
        setInput('');
        setLoading(true);

        try {
            // Use the enhanced chat API with tool calls
            const response = await api.chatWithToolCalls(input, user?.id);
            
            if (response.success) {
                const botMsg: Message = { 
                    id: generateId(), 
                    sender: 'bot', 
                    text: response.data?.message || "I'm not sure how to respond to that. Can you try asking about our products?",
                    timestamp: new Date(),
                    products: response.data?.products // Include any product search results
                };
                setMessages(prev => [...prev, botMsg]);
            } else {
                // Fallback if backend chat fails
                const botMsg: Message = { 
                    id: generateId(),
                    sender: 'bot', 
                    text: "I'm having trouble connecting right now. Please try asking about our products or browse our catalog!",
                    timestamp: new Date()
                };
                setMessages(prev => [...prev, botMsg]);
            }
        } catch (err) {
            console.error('Chat error:', err);
            setMessages(prev => [...prev, { 
                id: generateId(),
                sender: 'bot', 
                text: 'Sorry, I encountered an error. Please try again or browse our products!',
                timestamp: new Date()
            }]);
        } finally {
            setLoading(false);
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    const toggleChat = () => {
        setIsOpen(prev => !prev);
    };

    return (
        <>
            {/* Chat toggle button */}
            {!isOpen && (
                <button 
                    onClick={toggleChat}
                    className="fixed bottom-4 right-4 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-all z-50"
                    aria-label="Open chat"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" />
                    </svg>
                </button>
            )}

            {/* Chatbot container */}
            {isOpen && (
                <div className="chatbot-container">
                    <div className="chat-header">
                        <span>Store Assistant</span>
                        <button onClick={toggleChat} aria-label="Close chat">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    
                    <div className="chat-window">
                        {messages.length === 0 && (
                            <div className="chat-welcome">
                                <p>ðŸ‘‹ Hi! I'm your shopping assistant. Ask me about products, check your cart, or get recommendations!</p>
                            </div>
                        )}
                        
                        {messages.map((m) => (
                            <ChatBubble 
                                key={m.id} 
                                sender={m.sender} 
                                text={m.text} 
                                timestamp={m.timestamp}
                                products={m.products}
                                onAddToCart={handleAddToCart}
                                onViewDetails={handleViewDetails}
                            />
                        ))}
                        
                        {loading && (
                            <div className="chat-bubble bot typing">
                                <div className="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        )}
                        
                        <div ref={messagesEndRef} />
                    </div>
                    
                    <div className="chat-input">
                        <input
                            ref={inputRef}
                            value={input}
                            onChange={e => setInput(e.target.value)}
                            onKeyDown={handleKeyDown}
                            placeholder="Ask me about products..."
                            disabled={loading}
                        />
                        <button 
                            onClick={sendMessage}
                            disabled={loading || !input.trim()}
                            aria-label="Send message"
                        >
                            Send
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                            </svg>
                        </button>
                    </div>
                </div>
            )}
        </>
    );
};

export default ChatBot;
